# pdf_utils.py — Generate candidate summaries as PDF

from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import inch
from io import BytesIO

def generate_summary_pdf(candidate):
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4

    def draw_text(label, value, y_offset, icon="•"):
        c.setFont("Helvetica-Bold", 10)
        c.drawString(50, y_offset, f"{icon} {label}")
        c.setFont("Helvetica", 10)
        c.drawString(200, y_offset, str(value))

    y = height - inch
    spacing = 20

    # ======= Header ========
    c.setFont("Helvetica-Bold", 14)
    c.drawString(50, y, "📄 Candidate Fitment Summary")
    y -= spacing * 2

    # ======= Contact Info ========
    draw_text("Name", candidate.get("name", "N/A"), y, icon="👤")
    y -= spacing
    draw_text("Email", candidate.get("email", "N/A"), y, icon="📧")
    y -= spacing
    draw_text("Phone", candidate.get("phone", "N/A"), y, icon="📞")
    y -= spacing
    draw_text("JD Role", candidate.get("jd_role", "N/A"), y, icon="🧠")
    y -= spacing * 2

    # ======= Scoring ========
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, y, "📊 Scores (0–100)")
    y -= spacing
    for metric in ["jd_similarity", "skills_match", "domain_match", "experience_match", "score"]:
        draw_text(metric.replace("_", " ").title(), candidate.get(metric, 0), y)
        y -= spacing
    y -= spacing / 2

    # ======= Verdict ========
    draw_text("Verdict", candidate.get("verdict", "N/A").capitalize(), y,
              icon="✅" if candidate.get("verdict") == "shortlist" else "❌" if candidate.get("verdict") == "reject" else "🟨")
    y -= spacing

    # ======= Fitment Summary ========
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, y, "📌 Fitment Summary")
    y -= spacing
    c.setFont("Helvetica", 10)
    for line in str(candidate.get("fitment", "N/A")).split("\n"):
        c.drawString(50, y, line.strip())
        y -= spacing / 1.3
    y -= spacing / 2

    # ======= Summary (5 lines) ========
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, y, "📝 Summary")
    y -= spacing
    c.setFont("Helvetica", 10)
    for line in str(candidate.get("summary_5_lines", "N/A")).split("\n"):
        c.drawString(50, y, line.strip())
        y -= spacing / 1.3
    y -= spacing / 2

    # ======= Recruiter Notes (if any) ========
    notes = candidate.get("recruiter_notes", "").strip()
    if notes:
        c.setFont("Helvetica-Bold", 12)
        c.drawString(50, y, "🗒️ Recruiter Notes")
        y -= spacing
        c.setFont("Helvetica", 10)
        for line in notes.split("\n"):
            c.drawString(50, y, line.strip())
            y -= spacing / 1.3
        y -= spacing / 2

    # ======= Red Flags ========
    red_flags = candidate.get("red_flags", [])
    if red_flags:
        c.setFont("Helvetica-Bold", 12)
        c.drawString(50, y, "🚩 Red Flags")
        y -= spacing
        c.setFont("Helvetica", 10)
        for flag in red_flags:
            c.drawString(50, y, f"- {flag}")
            y -= spacing / 1.3
        y -= spacing / 2

    # ======= Missing Info ========
    missing = candidate.get("missing_gaps", [])
    if missing:
        c.setFont("Helvetica-Bold", 12)
        c.drawString(50, y, "❓ Missing Info")
        y -= spacing
        c.setFont("Helvetica", 10)
        for m in missing:
            c.drawString(50, y, f"- {m}")
            y -= spacing / 1.3
        y -= spacing / 2

    # ======= Rejection Reasons ========
    if candidate.get("verdict") == "reject":
        c.setFont("Helvetica-Bold", 12)
        c.drawString(50, y, "❌ Rejection Reasons")
        y -= spacing
        c.setFont("Helvetica", 10)
        for reason in candidate.get("reasons_if_rejected", []):
            c.drawString(50, y, f"- {reason}")
            y -= spacing / 1.3
        y -= spacing / 2

    # ======= Alternate Role ========
    recommendation = candidate.get("recommendation", "")
    if recommendation:
        c.setFont("Helvetica-Bold", 12)
        c.drawString(50, y, "🎯 Alternate Role Suggestion")
        y -= spacing
        c.setFont("Helvetica", 10)
        c.drawString(50, y, recommendation.strip())
        y -= spacing * 1.5

    # ======= Highlights ========
    highlights = candidate.get("highlights", [])
    if highlights:
        c.setFont("Helvetica-Bold", 12)
        c.drawString(50, y, "🌟 Highlights")
        y -= spacing
        c.setFont("Helvetica", 10)
        for h in highlights:
            c.drawString(50, y, f"- {h}")
            y -= spacing / 1.3
        y -= spacing / 2

    # ======= Footer ========
    c.setFont("Helvetica-Oblique", 8)
    c.drawString(50, 40, "Generated by AI Resume Screener • GPT-4.1 • Azure OpenAI • Confidential")

    c.showPage()
    c.save()
    buffer.seek(0)
    return buffer.getvalue()
